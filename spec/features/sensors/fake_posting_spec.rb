require 'spec_helper'

feature 'POSTing fake sensor data', :js do
  scenario 'Admin POSTs fake weekly "normal flow" data for a project last updated by a survey' do
    Given 'There is a needs_maintenance (from a survey) project with a sensor'
    And 'I am logged in as an admin'
    When 'I POST fake weekly "normal flow" data'
    Then 'I see the needs_maintenance project is now needs_visit'
  end

  scenario 'Admin POSTs fake weekly "normal flow" data for a project last updated by sensor' do
    Given 'There is a needs_maintenance (from a sensor) project with a sensor'
    And 'I am logged in as an admin'
    When 'I POST fake weekly "normal flow" data'
    Then 'I see the needs_maintenance project is now flowing'
  end

  scenario 'Admin POSTs fake weekly "red flag" data' do
    Given 'There is a needs_visit project with a sensor'
    And 'I am logged in as an admin'
    When 'I POST fake weekly "red flag" data'
    Then 'I see the needs_visit project is now needs_maintenance'
  end

  scenario 'Admin POSTs fake out-of-band "red flag" data' do
    Given 'There is a flowing project with a sensor'
    And 'I am logged in as an admin'
    When 'I POST fake out-of-band "red flag" data'
    Then 'I see the flowing project is now needs_maintenance'
  end

  # scenario 'Admin POSTs fake weekly "red flag" data to a broken-and-fixed project' do
  #   Given 'There is a broken-and-fixed project with a sensor'
  #   And 'I am logged in as an admin'
  #   When 'I POST fake weekly "red flag" data'
  #   Then 'I see the broken-and-fixed project is still flowing'
  # end

  scenario 'Admin disables sensors' do
    Given 'There is a needs_maintenance (from a survey) project with a sensor'
    And 'I am logged in as an admin'
    When 'I disable the sensors'
    And 'I POST fake weekly "normal flow" data'
    Then 'I see the needs_maintenance project stays as needs_maintenance'
  end

  given(:device_id) { "1289600793682" }
  given(:imei) { "013949004634708" }

  given!(:application_settings) do
    ApplicationSettings.create(sensors_affect_project_status: true)
  end

  def there_is_a_needs_maintenance_from_a_survey_project_with_a_sensor
    project = create(
      :project,
      :needs_maintenance,
      community_name: 'Fancy Community',
      deployment_code: 'FA.NCY.Q1.11.111.111',
    )

    create(
      :ticket,
      :in_progress,
      id: 30000,
      project: project,
      started_at: DateTime.new(2004),
    )

    create(
      :sensor,
      project: project,
      device_id: device_id,
      imei: imei
    )

    create(
      :activity,
      :status_changed,
      project: project,
      data: {
        status: Project.statuses[:needs_maintenance],
        fs_survey_id: 1,
        fs_response_id: 2,
      },
    )
  end

  def i_post_fake_weekly_normal_flow_data
    click_on 'Sensors'
    expect(page).to have_content(/\+ Fake weekly "normal flow"/i)

    click_on '+ Fake weekly "normal flow"'
    expect(page).to have_content '101,705'
  end

  def i_see_the_needs_maintenance_project_is_now_needs_visit
    click_link 'FA.NCY.Q1.11.111.111'

    expect(page).to have_content(/Status\s?Needs Visit/i)
    expect(page).to have_content(/Needs Visit \(generated by sensor\)/i)
    expect(page).to have_content(/#\d+\s?In Progress \(generated by sensor\)/i)
    expect(page).to have_content(/#30000\s?Complete/i)

    click_link 'In Progress'
    expect(page).to have_content(/functional\?\s?Yes/i)
    expect(page).to have_content(/consumed\?\s?N\/A/i)
    expect(page).to have_content(/maintenance visit required\?\s?yes/i)
    expect(page).to have_content(/automatically generated by sensor/i)
    expect(page).to have_content device_id
  end

  def there_is_a_needs_maintenance_from_a_sensor_project_with_a_sensor
    project = create(
      :project,
      :needs_maintenance,
      community_name: 'Fancy Community',
      deployment_code: 'FA.NCY.Q1.11.111.111',
    )

    create(
      :ticket,
      :in_progress,
      id: 30000,
      project: project,
      started_at: DateTime.new(2004),
    )

    sensor = create(
      :sensor,
      project: project,
      device_id: device_id,
      imei: imei
    )

    create(
      :activity,
      :status_changed_to_needs_maintenance,
      project: project,
      sensor: sensor,
    )
  end

  def i_see_the_needs_maintenance_project_is_now_flowing
    click_link 'FA.NCY.Q1.11.111.111'

    expect(page).to have_content(/Status\s?Flowing/i)
    expect(page).to have_content(/Flowing \(generated by sensor\)/i)
    expect(page).to have_content(/#30000\s?Complete/i)
    expect(page).not_to have_content(/In Progress/i)
  end

  def there_is_a_needs_visit_project_with_a_sensor
    project = create(
      :project,
      :needs_visit,
      community_name: 'Fancy Community',
      deployment_code: 'FA.NCY.Q1.11.111.111',
    )

    create(
      :ticket,
      :in_progress,
      id: 30000,
      project: project,
      started_at: DateTime.new(2004),
    )

    create(
      :sensor,
      project: project,
      device_id: device_id,
      imei: imei
    )
  end

  def i_post_fake_weekly_red_flag_data
    click_on 'Sensors'
    expect(page).to have_content(/\+ Fake weekly "red flag"/i)

    click_on '+ Fake weekly "red flag"'
    within 'table' do
      expect(page).to have_content '2,366'
    end
  end

  def there_is_a_flowing_project_with_a_sensor
    project = create(
      :project,
      :flowing,
      community_name: 'Fancy Community',
      deployment_code: 'FA.NCY.Q1.11.111.111',
    )

    create(
      :sensor,
      project: project,
      device_id: device_id,
      imei: imei
    )
  end

  def i_post_fake_out_of_band_red_flag_data
    click_on 'Sensors'
    expect(page).to have_content(/\+ Fake out-of-band "red flag"/i)

    click_on '+ Fake out-of-band "red flag"'
    expect(page).to have_content(/\s26\s/)
  end

  def i_see_the_needs_visit_project_is_now_needs_maintenance
    click_link 'FA.NCY.Q1.11.111.111'

    expect(page).to have_content(/Status\s?Needs Maintenance/i)
    expect(page).to have_content(/Needs Maintenance \(generated by sensor\)/i)
    expect(page).to have_content(/#\d+\s?In Progress \(generated by sensor\)/i)
    expect(page).to have_content(/#30000\s?Complete/i)

    click_link 'In Progress'
    expect(page).to have_content(/functional\?\s?No/i)
    expect(page).to have_content(/consumed\?\s?N\/A/i)
    expect(page).to have_content(/maintenance visit required\?\s?Yes/i)
    expect(page).to have_content(/automatically generated by sensor/i)
    expect(page).to have_content device_id
  end

  def i_disable_the_sensors
    within('nav') do
      hover 'Admin'
      click_on 'DISPATCH Options'
    end

    expect(page).not_to have_content 'Dashboard'
    expect(page).to have_content 'DISPATCH Options'

    uncheck 'Sensors affect project status'
    click_on 'Save DISPATCH Options'
    expect(page).to have_content 'options have been successfully updated'
  end

  def i_see_the_needs_maintenance_project_stays_as_needs_maintenance
    click_link 'FA.NCY.Q1.11.111.111'

    expect(page).to have_content(/Status\s?Needs Maintenance/i)
    expect(page).to have_content(/#30000\s?Overdue/i)
    expect(page).not_to have_content(/generated by sensor/i)
  end

  def i_see_the_flowing_project_is_now_needs_maintenance
    click_link 'FA.NCY.Q1.11.111.111'

    expect(page).to have_content(/Status\s?Needs Maintenance/i)
    expect(page).to have_content(/Needs Maintenance \(generated by sensor\)/i)
    expect(page).to have_content(/#\d+\s?In Progress \(generated by sensor\)/i)

    click_link 'In Progress'
    expect(page).to have_content(/functional\?\s?No/i)
    expect(page).to have_content(/consumed\?\s?N\/A/i)
    expect(page).to have_content(/maintenance visit required\?\s?Yes/i)
    expect(page).to have_content(/automatically generated by sensor/i)
    expect(page).to have_content device_id
  end

  def there_is_a_broken_and_fixed_project_with_a_sensor
    project = create(
      :project,
      :flowing,
      community_name: 'Fancy Community',
      deployment_code: 'FA.NCY.Q1.11.111.111',
    )

    sensor = create(
      :sensor,
      project: project,
      device_id: device_id,
      imei: imei
    )

    js_week_starts_on_sunday = 1.day

    create(
      :weekly_log,
      :out_of_band,
      sensor: sensor,
      week_started_at: Time.zone.now.beginning_of_week - js_week_starts_on_sunday,
      unit_id: 1234,
    )
  end

  def i_see_the_broken_and_fixed_project_is_still_flowing
    click_link 'FA.NCY.Q1.11.111.111'

    expect(page).to have_content(/Status\s?Flowing/i)
    expect(page).not_to have_content(/generated by sensor/i)
    expect(page).not_to have_content(/#\d{5,}/i)
    expect(page).not_to have_content(/In Progress/i)
  end
end
