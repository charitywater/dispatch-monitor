require 'spec_helper'

module RemoteMonitoring
  describe SensorDataParser do
    let(:encoded_data) { "//8ACVQCIxAUII/fj9+P34/fj9+P34/fj9+P34/fj9+P34/fj9+P34/fj9+P34/fj9+P34/fj9+P34KrE7Cvq/iyXLxsyO2qT6/6qi6yh7t6x2UFWwVQBVQFVwWJBSUY/////4/fj9+P34/fj9+P34/fj9+P34/fj9+P34/fj9+P34/fj9+P34/fj9+P34/fj9+P31ur76+Iq9OyMLw8yP6qp69Aq46y3Lvrx1oFTwVZBVoFWwWIBcoY/////4/fj9+P34/fj9+P34/fj9+P34/fj9+P34/fj9+P34/fj9+P34/fj9+P34/fj9+P33Gr+6+dq96ySbxPyAirsK9Jq42y6Lv6x10FVAVWBVwFVwWIBXUZ/////4/fj9+P34/fj9+P34/fj9+P34/fj9+P34/fj9+P34/fj9+P34/fj9+P34/fj9+P32Wr/q+Sq9uyO7xSyA2rxq9Qq5qy87v/x2MFWAVQBVQFYAWJBSUa/////4/fj9+P34/fj9+P34/fj9+P34/fj9+P34/fj9+P34/fj9+P34/fj9+P34/fj9+P32Or/K+Yq9myO7xZyOaqk68hq2WyxLvix1kFYAVRBVMFXQWIBc4a/////4/fj9+P34/fj9+P34/fj9+P34/fj9+P34/fj9+P34/fj9+P34/fj9+P34/fj9+P3xeso7AvrIGz3rz7yISpKK7tqQKxUroAxlMZmRlxGkoaehqBGwAF/////4/fj9+P34/fj9+P34/fj9+P34/fj9+P34/fj9+P34/fj9+P34/fj9+P34/fj9+P3yytgrHkrCy0tL0Yyq6koKi8pHern7QBwfFMJU5dT3VPkk8CUXsN////////" }
    let(:sensor_data_parser) { RemoteMonitoring::SensorDataParser.new(encoded_data) }

    describe '#decode_weekly' do
      let(:raw_data_weekly) { [255, 255, 0, 9, 84, 2, 35, 16, 20, 32, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 130, 171, 19, 176, 175, 171, 248, 178, 92, 188, 108, 200, 237, 170, 79, 175, 250, 170, 46, 178, 135, 187, 122, 199, 101, 5, 91, 5, 80, 5, 84, 5, 87, 5, 137, 5, 37, 24, 255, 255, 255, 255, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 91, 171, 239, 175, 136, 171, 211, 178, 48, 188, 60, 200, 254, 170, 167, 175, 64, 171, 142, 178, 220, 187, 235, 199, 90, 5, 79, 5, 89, 5, 90, 5, 91, 5, 136, 5, 202, 24, 255, 255, 255, 255, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 113, 171, 251, 175, 157, 171, 222, 178, 73, 188, 79, 200, 8, 171, 176, 175, 73, 171, 141, 178, 232, 187, 250, 199, 93, 5, 84, 5, 86, 5, 92, 5, 87, 5, 136, 5, 117, 25, 255, 255, 255, 255, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 101, 171, 254, 175, 146, 171, 219, 178, 59, 188, 82, 200, 13, 171, 198, 175, 80, 171, 154, 178, 243, 187, 255, 199, 99, 5, 88, 5, 80, 5, 84, 5, 96, 5, 137, 5, 37, 26, 255, 255, 255, 255, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 99, 171, 252, 175, 152, 171, 217, 178, 59, 188, 89, 200, 230, 170, 147, 175, 33, 171, 101, 178, 196, 187, 226, 199, 89, 5, 96, 5, 81, 5, 83, 5, 93, 5, 136, 5, 206, 26, 255, 255, 255, 255, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 23, 172, 163, 176, 47, 172, 129, 179, 222, 188, 251, 200, 132, 169, 40, 174, 237, 169, 2, 177, 82, 186, 0, 198, 83, 25, 153, 25, 113, 26, 74, 26, 122, 26, 129, 27, 0, 5, 255, 255, 255, 255, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 143, 223, 44, 173, 130, 177, 228, 172, 44, 180, 180, 189, 24, 202, 174, 164, 160, 168, 188, 164, 119, 171, 159, 180, 1, 193, 241, 76, 37, 78, 93, 79, 117, 79, 146, 79, 2, 81, 123, 13, 255, 255, 255, 255, 255, 255] } #functionally the same as an array of hex

      it 'decodes the weekly packet from the raw data' do
        daily1 = sensor_data_parser.decode_daily(raw_data_weekly[10..100])
        daily2 = sensor_data_parser.decode_daily(raw_data_weekly[100..190])
        daily3 = sensor_data_parser.decode_daily(raw_data_weekly[190..280])
        daily4 = sensor_data_parser.decode_daily(raw_data_weekly[280..370])
        daily5 = sensor_data_parser.decode_daily(raw_data_weekly[370..460])
        daily6 = sensor_data_parser.decode_daily(raw_data_weekly[460..550])
        daily7 = sensor_data_parser.decode_daily(raw_data_weekly[550..640])

        weekly_packet = {
          "values" => {
            "weeklyLog" => {
              "redFlag" => 0,
              "GMTsecond" => 9,
              "GMTminute" => 54,
              "GMThour" => 2,
              "GMTday" => 23,
              "GMTmonth" => 10,
              "GMTyear" => 14,
              "dailyLogs" => [daily1, daily2, daily3, daily4, daily5, daily6, daily7]
            }
          }
        }

        expect(sensor_data_parser.decode_weekly).to eq weekly_packet
      end
    end
  end
end